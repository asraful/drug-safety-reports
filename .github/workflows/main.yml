name: Build and Deploy to ECS with ALB

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag'
        required: false
      environment:
        description: 'Deployment environment (dev, staging, prod)'
        required: false
        default: 'dev'
env:
  AWS_REGION: eu-north-1
  ECR_REPOSITORY: 818346694630.dkr.ecr.eu-north-1.amazonaws.com/asraful-dev
  IMAGE_TAG: ${{ github.sha }}
  CLUSTER_NAME: pv-cluster
  SERVICE_NAME: report-service-dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Install pack CLI
        run: |
          curl -sSL "https://github.com/buildpacks/pack/releases/download/v0.33.2/pack-v0.33.2-linux.tgz" | tar -xz
          sudo mv pack /usr/local/bin/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        run: |
          echo "Logging into ECR..."
          aws ecr get-login-password --region $AWS_REGION | \
            docker login --username AWS --password-stdin "$(aws sts get-caller-identity --query 'Account' --output text).dkr.ecr.$AWS_REGION.amazonaws.com"

      - name: Build and push image with Buildpacks
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
          FULL_IMAGE_URI="$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG"
          
          echo "Building image with Buildpacks..."
          pack build "$FULL_IMAGE_URI" \
            --builder paketobuildpacks/builder:base \
            --env BP_JVM_VERSION=17 \
            --publish

      - name: Deploy to ECS
        run: |
          echo "Updating ECS service..."
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --force-new-deployment

      - name: Wait for ECS service to stabilize
        run: |
          echo "Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster $CLUSTER_NAME \
            --services $SERVICE_NAME
